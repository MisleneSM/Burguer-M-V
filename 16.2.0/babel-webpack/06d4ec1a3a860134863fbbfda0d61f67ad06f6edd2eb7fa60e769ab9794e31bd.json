{"ast":null,"code":"var _class;\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.apiUrl = 'http://localhost:8080/login';\n  }\n  login(email, password) {\n    const userLogin = {\n      email,\n      password\n    };\n    return this.http.post(this.apiUrl, userLogin).pipe(tap(response => {\n      if (response.accessToken) {\n        localStorage.setItem('token', response.accessToken);\n        localStorage.setItem('userEmail', email);\n        localStorage.setItem('userRole', response.user.role);\n        localStorage.setItem('username', response.user.name);\n      } else {\n        throw new Error('Login inválido');\n      }\n    }));\n  }\n}\n_class = AuthService;\n_class.ɵfac = function AuthService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["tap","AuthService","constructor","http","router","apiUrl","login","email","password","userLogin","post","pipe","response","accessToken","localStorage","setItem","user","role","name","Error","i0","ɵɵinject","i1","HttpClient","i2","Router","factory","ɵfac","providedIn"],"sources":["C:\\Users\\misle\\Desktop\\Burguer-M-V\\my-first-project\\src\\app\\components\\services\\authentication.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { Router } from '@angular/router';\n\ninterface AuthResponse {\n  accessToken: string;\n  user: {\n    role: string;\n    name: string;\n  };\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = 'http://localhost:8080/login';\n\n  constructor(private http: HttpClient, private router: Router) { }\n\n  login(email: string, password: string): Observable<boolean> {\n    const userLogin = { email, password };\n    return this.http.post<AuthResponse>(this.apiUrl, userLogin).pipe(\n      tap(response => {\n        if (response.accessToken) {\n          localStorage.setItem('token', response.accessToken);\n          localStorage.setItem('userEmail', email);\n          localStorage.setItem('userRole', response.user.role);\n          localStorage.setItem('username', response.user.name);\n        } else {\n          throw new Error('Login inválido');\n        }\n      })\n    );\n  }\n\n  // Pode adicionar outros métodos relacionados à autenticação aqui, como logout, verificação de token, etc.\n}\n"],"mappings":";AAGA,SAASA,GAAG,QAAQ,gBAAgB;;;;AAcpC,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,MAAM,GAANA,MAAM;IAF5C,KAAAC,MAAM,GAAG,6BAA6B;EAEkB;EAEhEC,KAAKA,CAACC,KAAa,EAAEC,QAAgB;IACnC,MAAMC,SAAS,GAAG;MAAEF,KAAK;MAAEC;IAAQ,CAAE;IACrC,OAAO,IAAI,CAACL,IAAI,CAACO,IAAI,CAAe,IAAI,CAACL,MAAM,EAAEI,SAAS,CAAC,CAACE,IAAI,CAC9DX,GAAG,CAACY,QAAQ,IAAG;MACb,IAAIA,QAAQ,CAACC,WAAW,EAAE;QACxBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,QAAQ,CAACC,WAAW,CAAC;QACnDC,YAAY,CAACC,OAAO,CAAC,WAAW,EAAER,KAAK,CAAC;QACxCO,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEH,QAAQ,CAACI,IAAI,CAACC,IAAI,CAAC;QACpDH,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEH,QAAQ,CAACI,IAAI,CAACE,IAAI,CAAC;OACrD,MAAM;QACL,MAAM,IAAIC,KAAK,CAAC,gBAAgB,CAAC;;IAErC,CAAC,CAAC,CACH;EACH;;SAnBWlB,WAAW;;mBAAXA,MAAW,EAAAmB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;AAAA;;SAAXxB,MAAW;EAAAyB,OAAA,EAAXzB,MAAW,CAAA0B,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}