{"ast":null,"code":"var _class;\nimport { catchError, map } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.apiUrl = 'https://localhost:8080/login'; // Use HTTPS instead of HTTP\n    this.accessTokenKey = 'accessToken'; // Use a consistent key for token storage\n    this.userRoleKey = 'userrole';\n    this.userNameKey = 'userName';\n    this.userEmailKey = 'userEmail';\n  }\n  login(email, password) {\n    const loginUser = {\n      email,\n      password\n    };\n    return this.http.post(`${this.apiUrl}/login`, loginUser).pipe(map(response => {\n      if (response.accessToken) {\n        // Use camelCase for consistency\n        localStorage.setItem(this.accessTokenKey, response.accessToken);\n        localStorage.setItem(this.userRoleKey, response.user.role);\n        localStorage.setItem(this.userNameKey, response.user.name);\n        localStorage.setItem(this.userEmailKey, response.user.email);\n        return true;\n      } else {\n        throw new Error(\"Invalid credentials\");\n      }\n    }), catchError(error => {\n      console.log('Login error', error);\n      throw new Error(\"An error occurred during login. Please try again.\");\n    }));\n  }\n  isUserLoggedIn() {\n    return !!localStorage.getItem(this.accessTokenKey); // Use double negation to convert to boolean\n  }\n\n  getUserEmail() {\n    return localStorage.getItem(this.userEmailKey);\n  }\n  storeToken(token) {\n    localStorage.setItem(this.accessTokenKey, token);\n  }\n  logout() {\n    localStorage.removeItem(this.accessTokenKey);\n    localStorage.removeItem(this.userEmailKey);\n    this.router.navigate(['']);\n  }\n  getUserName() {\n    return localStorage.getItem(this.userNameKey);\n  }\n}\n_class = AuthService;\n_class.ɵfac = function AuthService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["catchError","map","AuthService","constructor","http","router","apiUrl","accessTokenKey","userRoleKey","userNameKey","userEmailKey","login","email","password","loginUser","post","pipe","response","accessToken","localStorage","setItem","user","role","name","Error","error","console","log","isUserLoggedIn","getItem","getUserEmail","storeToken","token","logout","removeItem","navigate","getUserName","i0","ɵɵinject","i1","HttpClient","i2","Router","factory","ɵfac","providedIn"],"sources":["C:\\Users\\misle\\Desktop\\Burguer-M-V\\my-first-project\\src\\app\\components\\services\\authentication.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { Router } from \"@angular/router\";\nimport { catchError, map } from \"rxjs/operators\";\nimport { Observable } from \"rxjs\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = 'https://localhost:8080/login'; // Use HTTPS instead of HTTP\n  private accessTokenKey = 'accessToken'; // Use a consistent key for token storage\n  private userRoleKey = 'userrole';\n  private userNameKey = 'userName';\n  private userEmailKey = 'userEmail';\n\n  constructor(private http: HttpClient, private router: Router) {}\n\n  login(email: string, password: string): Observable<boolean> {\n    const loginUser = { email, password };\n\n    return this.http.post<any>(`${this.apiUrl}/login`, loginUser).pipe(\n      map(response => {\n        if (response.accessToken) { // Use camelCase for consistency\n          localStorage.setItem(this.accessTokenKey, response.accessToken);\n          localStorage.setItem(this.userRoleKey, response.user.role);\n          localStorage.setItem(this.userNameKey, response.user.name);\n          localStorage.setItem(this.userEmailKey, response.user.email);\n          return true;\n        } else {\n          throw new Error(\"Invalid credentials\");\n        }\n      }),\n      catchError(error => {\n        console.log('Login error', error);\n        throw new Error(\"An error occurred during login. Please try again.\");\n      })\n    );\n  }\n\n  isUserLoggedIn(): boolean {\n    return !!localStorage.getItem(this.accessTokenKey); // Use double negation to convert to boolean\n  }\n\n  getUserEmail(): string | null { // Use camelCase for consistency\n    return localStorage.getItem(this.userEmailKey);\n  }\n\n  storeToken(token: string) { // Use camelCase for consistency\n    localStorage.setItem(this.accessTokenKey, token);\n  }\n\n  logout() {\n    localStorage.removeItem(this.accessTokenKey);\n    localStorage.removeItem(this.userEmailKey);\n    this.router.navigate(['']);\n  }\n\n  getUserName(): string | null {\n    return localStorage.getItem(this.userNameKey);\n  }\n}\n"],"mappings":";AAGA,SAASA,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;;;;AAMhD,OAAM,MAAOC,WAAW;EAOtBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,MAAM,GAANA,MAAM;IAN5C,KAAAC,MAAM,GAAG,8BAA8B,CAAC,CAAC;IACzC,KAAAC,cAAc,GAAG,aAAa,CAAC,CAAC;IAChC,KAAAC,WAAW,GAAG,UAAU;IACxB,KAAAC,WAAW,GAAG,UAAU;IACxB,KAAAC,YAAY,GAAG,WAAW;EAE6B;EAE/DC,KAAKA,CAACC,KAAa,EAAEC,QAAgB;IACnC,MAAMC,SAAS,GAAG;MAAEF,KAAK;MAAEC;IAAQ,CAAE;IAErC,OAAO,IAAI,CAACT,IAAI,CAACW,IAAI,CAAM,GAAG,IAAI,CAACT,MAAM,QAAQ,EAAEQ,SAAS,CAAC,CAACE,IAAI,CAChEf,GAAG,CAACgB,QAAQ,IAAG;MACb,IAAIA,QAAQ,CAACC,WAAW,EAAE;QAAE;QAC1BC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACb,cAAc,EAAEU,QAAQ,CAACC,WAAW,CAAC;QAC/DC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACZ,WAAW,EAAES,QAAQ,CAACI,IAAI,CAACC,IAAI,CAAC;QAC1DH,YAAY,CAACC,OAAO,CAAC,IAAI,CAACX,WAAW,EAAEQ,QAAQ,CAACI,IAAI,CAACE,IAAI,CAAC;QAC1DJ,YAAY,CAACC,OAAO,CAAC,IAAI,CAACV,YAAY,EAAEO,QAAQ,CAACI,IAAI,CAACT,KAAK,CAAC;QAC5D,OAAO,IAAI;OACZ,MAAM;QACL,MAAM,IAAIY,KAAK,CAAC,qBAAqB,CAAC;;IAE1C,CAAC,CAAC,EACFxB,UAAU,CAACyB,KAAK,IAAG;MACjBC,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEF,KAAK,CAAC;MACjC,MAAM,IAAID,KAAK,CAAC,mDAAmD,CAAC;IACtE,CAAC,CAAC,CACH;EACH;EAEAI,cAAcA,CAAA;IACZ,OAAO,CAAC,CAACT,YAAY,CAACU,OAAO,CAAC,IAAI,CAACtB,cAAc,CAAC,CAAC,CAAC;EACtD;;EAEAuB,YAAYA,CAAA;IACV,OAAOX,YAAY,CAACU,OAAO,CAAC,IAAI,CAACnB,YAAY,CAAC;EAChD;EAEAqB,UAAUA,CAACC,KAAa;IACtBb,YAAY,CAACC,OAAO,CAAC,IAAI,CAACb,cAAc,EAAEyB,KAAK,CAAC;EAClD;EAEAC,MAAMA,CAAA;IACJd,YAAY,CAACe,UAAU,CAAC,IAAI,CAAC3B,cAAc,CAAC;IAC5CY,YAAY,CAACe,UAAU,CAAC,IAAI,CAACxB,YAAY,CAAC;IAC1C,IAAI,CAACL,MAAM,CAAC8B,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;EAC5B;EAEAC,WAAWA,CAAA;IACT,OAAOjB,YAAY,CAACU,OAAO,CAAC,IAAI,CAACpB,WAAW,CAAC;EAC/C;;SAnDWP,WAAW;;mBAAXA,MAAW,EAAAmC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;AAAA;;SAAXxC,MAAW;EAAAyC,OAAA,EAAXzC,MAAW,CAAA0C,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}