{"ast":null,"code":"\"use strict\";\n\n/*import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { Router } from \"@angular/router\";\nimport { catchError, map } from \"rxjs/operators\";\nimport { Observable} from \"rxjs\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  constructor(private http: HttpClient, private router: Router) {}\n\n  login(email: string, password: string): Observable<boolean> {\n    const loginUser = { email, password };\n\n    return this.http.post<any>('http://localhost:8080/login', loginUser).pipe(\n      map(response => {\n        if (response.acessToken) {\n          localStorage.setItem('acessToken', response.acessToken);\n          localStorage.setItem('acessRole', response.user.role);\n          localStorage.setItem('acessName', response.user.name);\n          localStorage.setItem('acessEmail', response.user.email);\n          return true;\n        } else {\n          throw new Error(\"Inválidos\");\n        }\n      }),\n      catchError(error => {\n        console.log('Erro no login', error);\n        throw new Error(\"Ocorreu um erro durante o login. Por favor, tente novamente\");\n      })\n    );\n  }\n\n  isUserLoggedIn(): boolean {\n    return localStorage.getItem('token') !== null;\n  }\n\n  UserEmail(): string | null {\n    return localStorage.getItem('userEmail');\n  }\n\n  TokenStorage(token: string) {\n    localStorage.setItem('token', token);\n  }\n\n  Logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('userEmail');\n    this.router.navigate(['']);\n  }\n\n  Username(): string | null {\n    return localStorage.getItem('username');\n  }\n}*/","map":{"version":3,"names":[],"sources":["C:\\Users\\misle\\Desktop\\Burguer-M-V\\my-first-project\\src\\app\\services\\authentication.service.ts"],"sourcesContent":["/*import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { Router } from \"@angular/router\";\nimport { catchError, map } from \"rxjs/operators\";\nimport { Observable} from \"rxjs\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  constructor(private http: HttpClient, private router: Router) {}\n\n  login(email: string, password: string): Observable<boolean> {\n    const loginUser = { email, password };\n\n    return this.http.post<any>('http://localhost:8080/login', loginUser).pipe(\n      map(response => {\n        if (response.acessToken) {\n          localStorage.setItem('acessToken', response.acessToken);\n          localStorage.setItem('acessRole', response.user.role);\n          localStorage.setItem('acessName', response.user.name);\n          localStorage.setItem('acessEmail', response.user.email);\n          return true;\n        } else {\n          throw new Error(\"Inválidos\");\n        }\n      }),\n      catchError(error => {\n        console.log('Erro no login', error);\n        throw new Error(\"Ocorreu um erro durante o login. Por favor, tente novamente\");\n      })\n    );\n  }\n\n  isUserLoggedIn(): boolean {\n    return localStorage.getItem('token') !== null;\n  }\n\n  UserEmail(): string | null {\n    return localStorage.getItem('userEmail');\n  }\n\n  TokenStorage(token: string) {\n    localStorage.setItem('token', token);\n  }\n\n  Logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('userEmail');\n    this.router.navigate(['']);\n  }\n\n  Username(): string | null {\n    return localStorage.getItem('username');\n  }\n}*/\n"],"mappings":";;AAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}